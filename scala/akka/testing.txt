Include akka-testkit as dependency

Synchrounous(!) unit testing with TestActorRef: it doesnt work with traits that requires async behaviors

use behavioural testing instead of TestActorRef whenever possible, i.e., using messaging to ask the Actor to reply with the state you want to run assertions against

------
val actorRef = TestActorRef[MyActor]
val actor = actorRef.underlyingActor
val future = actoreRef ? Say42
val Success(result:Int) = future.value.get
result should be(42)

-----

intercept[IllegalArgumentExeption] { actorRef.receive("hello") }

common cases:
1. setting up the actor into a specific internal state before seting the test message
2. verify correct internal state transition after having sent the test message

-------
Use TestFSMRef to test finite state machine

val fsm = TestFSMRef(new TestFsmActor)

------------

Async integration testing with TestKit

testActor with expectMsg, ImplicitSender mixin

verify expected excepitons with loggging system

expectMsgPF

within([min, ] max) {
}

use TestProbe() as TestActorRef to pass around

Probes do not react to each other's dealdine or the dealine set in an enclusing TestKit instance,ie., 

within(1 second) {
  probe.expectMsg("hello")
}

has no effect on probe.expectMsg

-----
Any message from TestProbe to another actor which runs on the CallingThreadDispatcher has the risk of dead-lock, if that other acto might
also send to this problme. Also dangrous to try watching TestActorRef from a TestProbe


