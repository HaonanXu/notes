Motivation: 
On top of metrics and distributed logging, need visibility ACROSS services

------
First iteration:
“find me requests where the user was logged in and the request took more than two seconds and only certain databases were used and a transaction was held open for more than 500 ms” 

The profiling data was organized into a tree of blocks, with each block representing a certain operation or a remote call, similar to the notion of “span” in the OpenTracing API. Users could run ad hoc queries against the data stream in Kafka using command-line tools. 

modeled the call graph as a tree of blocks, with each block representing an operation within the application, such as a database call, an RPC, or even a library function like parsing JSON.

Merckx architecture is a pull model from a stream of instrumentation data in Kafkao

Merckx lacked any concept of distributed context propagation. It recorded SQL queries, Redis calls, and even calls to other services, but there was no way to go more than one level deep. 

how important it was to have a solid story for keeping request state around and propagating it correctly, without relying on global variables or global state.
---------
