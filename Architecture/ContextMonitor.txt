Context:
User is browsing various single page application(SPA)s, and he wants to view
and bookmark these SPA's in a centralized place

Problem:
Design a framework to record user's current URL,including hash portion in SPA. User will view SPAs and define bookmarks from our portal

Discussion
1. How to transfer URL data from 3rd party to our portal? Do we pull or let 3rd party push the thing to us
When we decide to save a bookmark, 3rd party sents us the current URL. We can explicitly pull from 3rd party, or sends 3rd party a push request, and 3rd party pushs to us.
Note that when we are pulling, if user switches while pulling is underway? Need to define the behavior where we bookmark the URL when it is saved, not necessarily the last URL user sees.

Another approach is to let 3rd party push to us every time its URL changes. The major concern is that we are interested in only the last URL so a lot of traffics are not needed. 

2. do we need a standalone coordinator/dispatcher?
given that we need to manage the association between our portal and 3rd party page. We will need a coordinator/dispatcher either as part of portal or standalone. Such event/association handling mechanism can be abstracted as framework. So should probably use a standalone one.

3.portal and 3rd party need to know the handle for communication channel. How to dispatch them?
Since we are viewing from portal, our portal can start the channel, and send channel information as part of 3rd party URL query parameter
Notice that simple handle is not enough, we need to send additional secret for authentication purposes. This shows why a dispatching framework would be nice, so we dont have to re-invent the wheel for other modules

4.Should the communication model centralized or peer-to-peer?
Our load is fairly small (URLs), so centralized solution is enough. Same logic happened to google cloud messaging: the heartbeat message between client/server all go through GCM, but size is limited to 4KB. Once actual payload starts, the communication starts directly between client/server. Note that the conneciton between GCM and client is persistant,i.e., not polling based. Our framework can probably do something similiar, e.g., web socket

5.Dynamics when we bookmark?
A. portal sends the pushing request
B. coordinator dispatchs request based on channel handle
C. 3rd party gets the request and pushs URL, most likely based on same channel
D. or portal gets URL and save it

6.To scale to multiple SPAs, what kind of package/SDK/API should we expose to third party?
listen to the channel + pushing message through channel. 3rd party will just supply the state info, the state info should not include anything related to our framework, e.g., handle/secret

From 3rd party perspective
Subscribe(getState) => getState provided by user, Subscribe provided by us
Inside subscribe(), we will keep the funciton, and listen to the push notification event. Is the waiting blocking?
when we hear the push notification event

Unsubscribe(getState) for completeness's sake. If we are using functional reactive programming, this is just a dispose call of our observables
