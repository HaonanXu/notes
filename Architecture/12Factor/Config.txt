config: everything that varies between deploys, e.g., resource handles, credentials, host-name for the specific deploy

Conversely, if configurable values do not vary between deploys, it can and should stay in code, even with "config" in its name 

Option:
A config file that is not in CB. Problems:
1. check in by mistake
2. hard to manage files that scatter across deploys
3. language/framework/platform specific

Solution: use environment variables: they are language/OS-agnostic

Then how do we manage env vars for multiple deploys?
Option 1: grouping them according to deploy they are to be used. Major problem
is namespace explosion, since we often need to have custom deploys 

Option 2:
complete decoupling of env vars. No relationship between any env vars. We will manage env vars independently for each deploy

----
Discussion

1. 
Conceptually, by definition, config is not part of lexical scope, so it should not be in
CB. 

So the evolution of the idea is to have config file/field that is left blank/not in CB. This is an implementation trick, since conceptually, the config values are still part of CB. Plus, it didnt address problem of accidental checkins and platform/tool dependent.

2.
Without grouping, concretely, how do we manage configs for deploys?
1. based on the app/deploy environment, we should be able to generate/fetch env var values and run the script when we are deploying
2. such generation, fetching scheme means we will have centralized management of config values, i.e., we know exactly env var values each deployment would use
