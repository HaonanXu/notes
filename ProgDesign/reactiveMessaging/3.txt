Store shopping cart input from a customer and deal with minor problems in the data later. It means revenue. You never want to tell the
customer you can’t accept their input. Choose Availability

you are not interacting directly with the customer. Choose Consistency. If you can’t obtain consistency for one data item, you can move on
to process a different data item and come back later. Also take advantage of the fact that part of this task’s services required at this
stage of processing will just need read-only data access. You can plan for consistency around databases that support high-performance reads.

false sharing:

The problem here is that we keep working toward designs that force threads to share system resources. One big sharing bottleneck is the
single work item queue. The other potential sharing bottleneck, or deadlock/livelock disaster zone, is the shared use of model entities.

f sharing causes problems, and even more so when network partitions occur, then don’t share. Stop sharing queues, stop sharing domain model
entities, and stop sharing the processes that operate on them

f production environments make for unwelcome surprises, then make our development and production environments work as similarly as possible.

ctors don’t share queues. As point #3 reinforces, actors have individual mailboxes

Delegate tasks specific to each business function to the type of actor that represents that area of the business. 

If you know which actors or related objects (for example, CircularQueue) are involved in very performance-intensive operations, make sure
that they occupy one or more entire cache lines


