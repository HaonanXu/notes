Synchrounous(!) unit testing with TestActorRef: it doesnt work with traits taht requires async behaviors

use behavioural testing instead of TestActorRef whenever possible, i.e., using messaging to ask the Actor to reply with the state you want to run assertions against

val actorRef = TestActorRef[MyActor]
val actor = actorRef.underlyingActor

val future = actoreRef ? Say42
val Success(result:Int) = futuren.value.get
result shoudl be(42)

inercept[IllegalArgumentExeption] { actorRef.receive("hello") }

common cases:
1. setting up the actor into a specific internal state before seting the test message
2. verify correct internal staet transition after having sent hte test message

------------

Async integration testing with TestKit


--------
Verifying expected exceptions can not be done direclty: replace normal event handler with TestEventListener

-----
use of TestProbe to expect message
