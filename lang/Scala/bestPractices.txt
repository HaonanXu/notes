1.
list map { item =>
  item match {
    case Some(x) => x
    case None => default
  }
}

to

list map {
    case Some(x) => x
    case None => default
}

2. return type annotaion for public methods

trait Service
def make() = new Service {
  def getId = 123
}

the return type is Object with Service{def getId: Int}

3.  type aliases

class ConcurrentPool[K, V] {
  type Queue = ConcurrentLinkedQueue[V]
  type Map   = ConcurrentHashMap[K, Queue]
  ...
}


4. collections design document

5. Use scala.collection.JavaConverters to interoperate with Java collections.

6. future

7. return inside closure is implemented catch/throwing pair

8. assert and require

9. partial functions

10. JVM GC performance

------

