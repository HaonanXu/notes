1. if the order of operations doesnt affect the final result(may change the actual solution, but doesnt change the answer to the question we are looking for)
then we can reorder the ops in the way convenient to us. 

2.This may mean searching in an easy to code way,e.g., we can search row by row, or in an sorted order (from min to max)
e.g. in an acyclic graph, we can force the search in topological order, so we can mark the part as searched without worrying about its dependency
this is one insight behind SCC algorithm

3. More importantly, our forced order can mean the partial search solution meets additional constraints, caused by this forced order, and
our next step can rely on this additional constraints
=> inventor's paradox, where we introduce more state to each step

4.If a solution exists, to re-construct the solution/find the solution, we can force the solution constructed in a specific/easy to code
way to force the conidtion that if a solution exists, our forced way must be able to discover ONE solution, although it may not cover ALL
solutions
