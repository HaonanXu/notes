monoid: a category with one object, so 3 parts
1. a type
2. identity element so that op(i, x) = x
3. associative op(x, op(y,z)) = op(op(x,y), z)

A function having the same argument and return type is sometimes called an endofunction
def endoMonoid[A]: Monoid[A => A]

The monoid is actually both things—the type together with the instance satisfying the laws. It’s more accurate to say that the type A forms
a monoid under the operations defined by the Monoid[A] instance.

def foldRight(z: A)(f: (A, A) => A): A
def foldLeft(z: A)(f: (A, A) => A): A

i.e., we can concatinate a list with a monoid

def foldMap[A,B](as: List[A], m: Monoid[B])(f: A => B): B

associativity allows balanced fold

def foldMapV[A,B](v: IndexedSeq[A], m: Monoid[B])(f: A => B): B
---

----

----
if types A and B are monoids, then the tuple type (A, B) is also a monoid

monoid for merging key-value Maps, as long as the value type is a monoid.



ids can be composed into one means that we can perform multiple calculations simultaneously when folding a data structure.
