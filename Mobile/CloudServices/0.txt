Components of protocol: syntax, semantics, and timing
---
Request:
Request method
	GET
	POST: send a lot of data
	PUT: store the data within request on server
	DELETE

that should be applied to
resource (e.g., /index.html), typically a path on the server
---
Request:
	Request line: request method + resource(path)
	Headers (extra meta info to help server): language, char set, content type, cookies
	Body (core data optional):
--
URL: Http://host:port/path
URL encoding: pass value that is not allowed in query parameter spec

MIME Type: id of type of information: describe body, C and S pass MIME types back and forth,e.g, image/jpg ,image/png, text/plain, text/html
Content-type communnicates the the body's MIME type

common request body MIME types: 
URL-enconded key-value pairs,e.g, form data, better for small amount of data due to less format overhead in this case

Multi part encoded data, e.g., file/large amount of data uploaded from form. Broken into part, each has its own key-value paris, 
better for large amount of data due to URL-encoding will increase amont of data sent in this case
Another one: Application/JSON (!!! more information of multi part)
----
Response
	Status Line: response code + phrase/text description
	Headers: content-type
	Body:

Response code: 
1xx-info
2xx-success
	200-ok
3xx-redirection, client has to some extra work, server will tell the new location, client has to resend the request
4xx-client error
5xx-server error
	500 - some error on server

------
Cookies: (small piece of) data sent to client client should store and send it back to the server in future requests
In response header, sent to client, client extracts data and store it in a temp storage. Associated with sessions

options: expiration date of cookie, use only https
