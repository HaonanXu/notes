Each task instance of the job consumes 1 partitoin of an input stream

Container periodically checkpoints current offset for each task instance

Kafka checkpointing:
Writes to __samza_checkpoint_<job-name>_<job-id>

Ignore checkpoint for topic: {topic}.samza.reset.offset=true 

Always start consuming {topic} at the oldest available offset: {topic}.samza.offset.default=oldest

use samza's checkpoint tool to manipulate job's checkpoints

if the effect of a message on state is idempotnent, it is safe for the same message to be procesed more than once

writes to local state is flushed to change log when task commits, flush local state first, then output/collector, and finally input. Note that the flush itself is NOT all or nohting, i.e., if you make mutliple changes during a single process, some of them may be lost

if you dont configure checkpointing, and a job or container restarts, it does not remember which messages it has already processed. Consumer hevaior is determined by the samza.offset.default

