Message acknowledgments are turned off by default. It's time to turn them on using the {noAck: false} option and send a proper acknowledgment from the worker, once we're done with a task.

This durable option change needs to be applied to both the producer and consumer code.

direct exchange: a message goes to the queues whose binding key exactly matches the routing key of the message.

By default, queues within a RabbitMQ cluster are located on a single node (the node on which they were first declared).

iEach mirrored queue consists of one master and one or more slaves, with the oldest slave being promoted to the new master if the old master disappears for any reason.

Messages published to the queue are replicated to all slaves. Consumers are connected to the master regardless of which node they connect to, with slaves dropping messages that have been acknowledged at the master.

it is valid to create a non-mirrored queue, and then make it mirrored at some later point (and vice versa). 

rabbitMQ no ordering guarantee

publisher confirms/acknowledgements

------
receiving:
1. open channel
2. bind q to channel

consumer need to turn on ACK, so that RabbitMQ is free to delete it. Otherwise, MQ will requeue it and redeliver it to another consumer
Make sure to include explicit ACK!
declare q as durable to make sure it will never lose the queue

exclusive queue is deleted whenver the connection that declares it is closed

Use exchange to deliber the same message to many consumers

need to point the workers to the same queues => create a random queue so that every time we start we hear only fresh messages

and if the queue is not durable, when consumer is disconnected, it is automatically disconnected

and bind queue to exchange
a message goes to queue whoise binding key exatcly matches the routing key of the message

topic exchange: routing key must be a list of words, delimited by .
* and # as wildcard

mirrored queue as well
