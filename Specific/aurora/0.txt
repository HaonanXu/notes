To determine which database (DB) instance in an Aurora DB cluster a connection is connected to, you need to check the innodb_read_only global variable.


To use Aurora for read scaling, you need to create an Amazon Aurora DB cluster before making it a replication slave of your MySQL BD instance. Keep in mind that this applies to Amazon RDS MySQL DB instances or MySQL databases that run external to RDS.


Use an Aurora DB cluster endpoint address when referencing your DB cluster. In the event of a failover, the replica promoted as the DB cluster’s primary instance will keep using that endpoint address.

Maintain all binlogs on your master instance until verifying they’ve been applied to the replica. This helps to make sure you’ll be able to restore the master instance if there’s a failure.

A known issue when an Aurora DB cluster is in the replication slave is that it might pause without warning. As a result, the CloudWatch ReplicaLog will keep growing. If this happens, you need to restore the cluster from its most recent snapshot and set up a replication of the restored cluster as the new replication slave.

 To use Aurora for DR, you need to create an Amazon Aurora DB cluster before making it a replication slave of your MySQL DB instance. Remember that this applies to Amazon RDS MySQL DB instances or MySQL databases that run external to RDS.

When setting up a replication between MySQL DB instances and an Aurora DB cluster, the replication isn’t managed by RDS. You need to proactively monitor it to make sure it stays healthy and make repairs as necessary.

check aurora performance white paper

In the event of a regional disruption, users can promote the cross-region replica to be the master. 

does not support automatic or transparent read/write splitting:

SHOW GLOBAL VARIABLES LIKE 'innodb_read_only'; 
The innodb_read_only variable will be set to ON if you are connected to an Aurora Replica and OFF if you are connected to the primary instance.

 We recommend that you wrap calls to the mysql.lambda_async procedure in a stored procedure that can be called from different sources such as triggers or client code. This can help to avoid impedance mismatch issues and make it easier for your database programmers to invoke Lambda functions.

We recommend that you do not use multi-threaded replication in production. If you do use multi-threaded replication, we recommend that you test any use thoroughly.

ead scaling and high availability depend on minimal lag time. You can monitor how far an Aurora Replica is lagging behind the primary instance of your Aurora DB cluster by monitoring the Amazon CloudWatch ReplicaLag metric. Because Aurora Replicas read from the same cluster volume as the primary instance, the ReplicaLag metric has a different meaning for an Aurora DB cluster. The ReplicaLag metric for an Aurora Replica indicates the lag for the page cache of the Aurora Replica compared to that of the primary instance.

If you need the most current value for Aurora Replica lag, you can query the mysql.ro_replica_status table in your Aurora DB cluster and check the value in the Replica_lag_in_msec column. This column value is provided to Amazon CloudWatch as the value for the ReplicaLag metric. The values in the mysql.ro_replica_status are also provided in the INFORMATION_SCHEMA.REPLICA_HOST_STATUS table in your Aurora DB cluster.


