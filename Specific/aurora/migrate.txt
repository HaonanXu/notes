One thing that we had to keep in mind was that there could be data inconsistency between MySQL and Aurora if new data is written between the time we migrated the data and the time we switched the connected database. We avoided this data inconsistency by temporarily stopping application use but not stopping the authentication function. We decided to announce a maintenance time, make the MySQL database read-only during that time (keeping authentication active), and migrate the data in that window. 

---------

Step 1: Make read replicas of MySQL and stop that replication to prevent the binary log from being deleted.

Step 2: Start Aurora.

Step 3: Construct replication with MySQL as master and Aurora as slave.

Step 4: Switch MySQL to read only, temporarily disabling some functions.

Step 5: Switch the access point to Aurora, application by application. Once the switch is made, all functions become active again.

Step 6: Stop MySQL.

In case of an error, we took a snapshot right after switching to read-only in step 4. From step 5, data writing to Aurora began. If a major problem occurred and forced us to fall back on MySQL, we would need to abandon the data written to Aurora since the beginning of step 5. We made the decision not to go back after step 5 even if a problem occurred.


