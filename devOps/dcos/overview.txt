DNS was designed to handle service discovery at Internet scale, but dynamically changing IPs along with caching and ports makes it infeasible

Can provide virtual IP and port for clients to communicate with your containers

Kernel space

mesos-master: orechestrates tasks run on Mesos agents. use ZK for leader elections between standbys

private agent nodes run the deployed apps and services thorugh a non-routable network. mesos-slave process on a agent managed its local
resources and register these resources with the masters. Also accepts scheudle requests from the master and invokes an executor to launch a
task via containerizers,e.g., mesos one or the docker one

-------
User-space

System components:

1. Admin router: NGINX config that provides authentication and proxy. Serves DC/OS UI and proxies external admin acoconections into the
cluster
2. Exhibitor configs ZK and gives a web UI
3. Mesos-DNS for service discovery
4. Minuteman: internal layer 4 load balancer
5. Distributed DNS proxy : internal DNS dispatcher
6. DC/OS Marathon: init for DC/OS, starts and monitors services
7. ZK 

Service in DC/OS : scheduler for scheduling task on behalf of a user, and an Executor for running tasks 
User-level applications

-------

Boot sequence:master
1. ZK starts via Exhibitor
2. Mesos masters launched, register with the local ZK and discover ohter masters
3. Mesos-DNS launched on all master nodes.  Mesos-DNS keeps hitting leader.mesos DNS entry, which points to the current master
5. Distributed DNS proxy runs on all master and agent nodes, and forwards DNS lookups to Mesos-DNS
6. DC/OS Marathon starts on every master node. Maratho connections to the local ZK, discovers leader.mesos and register as a framework
8. DC/OS UI, Mesos UI , and Exhibitor UI become externally accessible via admin router
10. Auth is managed on master nodes
11. DC/OS diagnostics and systemd service on every node

--------
Boot sequence:agent
1. wait until they can ping leader.mesos
2. via ZK, it discovers leader.mesos
3. register as agent with the leading Mesos master
4. master connects back to the agent node by using the IP address the agent registered with
5. agents become available 

-------
Boot sequence: Services

1. service scheuduler starts up and discovers the leading Mesos master via ZK, and registers with leader.mesos
2. mesos master confirms and scheduler stores the service ID in ZK
3. after service is registerd, the resource offer cycle between master and scheduler is started.


