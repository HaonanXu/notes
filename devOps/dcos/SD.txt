In the order of Mesosphere preference: VIP => Mesos-DNS => Marathon-LB

VIPs are name-based, i.e., client uses service address instead of IP address

TCP Layer 4 LB: Once create tasks with a VIP, they will automatically become available to all nodes in the cluster, including the masters

When use VIPS, you need long-running, peristent connections, otherwise, TCP socket table is filled up easily.even 200 cons/sec will exhaust
the port range

Notice health check is tricky

The failure detector maintains a fully connected sparse graph of connections amongest the nodes in the cluster
each node maintains an adjacency table, which is gopisible to every other node in the cluster



------
mesos-DNS: 
used mainly for SD, runs on each of the DC/OS masters. client knows each master. DNS proxy dual-dispatching DNS queries to multiple masters and returning the first result
Learns its info from Exhibitor
Domain spartan for Distributed DNS availability at ready.spartan

Mesos-DNS pulls masters every 30 seconds to retrive the state of all running tasks for all running services

Applications launched by Maration are assigned {appname}.marathon.mesos. One IP for each container.

If an agent node makes a DNS request for a hostname that is outside your DC/OS cluster, Mesos-DNS queries an external nameserver

GET /v1/hosts/{host}: Lists in JSON format the IP addresses that correspond to a hostname. It is the equivalent of a DNS A record lookup.

-----
Marathon-LB

Problem with Mesos-DNS for DS:
1. does not identify ports, unless with SRV record
2. does not have fast failover
3. TTL means potential stale record
4. no health data
5. rely on client to handle multiple A-records

1. edge LB and DS mechanism, run it on public-facing nodes
2. internal LB and SD, with a separate HA LB for routing public traffic in, e.g., an external F5 LB on premise or an ELB on AWS

Virtual hosts: route http traffic fro multiple hots and route requests to the correct endpoint

-------








