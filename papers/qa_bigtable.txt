Bigtable is based on GFS and uses a single-master architecure as well.
1. How does master discover the tablet server? Compare and contrast the solution with similar problems in GFS

2.How does client discover the tablet server? Compare and contrast the solution with similar problems in GFS?

3. How does bigtable detect master health? What will happen if IT THINKS the master has failed? Compare this failure detection and recovery
with GFS's design on its master and primary chuck server

4. How does master detects tablet server's health? What happens when the master thinks the tablet server has failed? Compare this
interaction with GFS's between its master and chunk server

5. How can master learn the the newly split tablet? How does GFS master learn the newly created chuck?

6. The commit log is in GFS. What did they do in case GFS is experiencing latency? How would recovery work in this case?

6. SSTables are in GFS already, why do we still need that commit log?

7. Sequence of actions on read? compare this with GFS's sequence of reading

8. Sequence of actions on write? compare this with GFS's sequence of writing

9. What kinds of info/metrics they monitor, and how did they do that? Compare their collections with GFS's.

10. compare the 2 systems write guarantees, what does the difference mean to application developers

11. SSTable is immutable, how does mutation happen?

12. Explain sequence of actions during a split-re-balancing



---------

1. 
BigTable: When master starts, it reads the root tablet from Chubby and learns existing tablet server's locations
When master is running, it watches the chubby directory for newly registered tablet server
GFS: Chuck server registers itself on master

2. Bigtable: 3-level name-resolution backed by chubby???
GFS: client gets info from master

3. 
Bigtable: If the chubby session expires for the master, the master just kills itself. (since its data is unreliable at that moment, and another master will acquire the session anyway)
GFS: outside monitoring detects it if the master can not restart, and then restart a new master with the replicated log. The master is visible to user only via DNS name

4. 
Bigtable: polls tablet server on whether if it still holds the lock
GFS: use heartbeat between master, which reports which chucks haven been deleted,  and chuck server, which reports a subset of chucks the server .

5.
Bigtable: tablet server splits on its own, and will write to the METADATA table, and will try to notify the chuck when this split tablet is accessed
GFS: chuck is fix-sized, so master is the one initiates chuck creation

6. 

7. 
Bigtable: client resolves the tablet location based on key with the location discovery discussed and then reads off the tablet server
GFS: Get chunk location from master and reads it from the chuck server

8.
Bigtable: similar to a WAL-backed datasore
GFS: ???

9.
