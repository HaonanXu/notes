K/V relationships is the mathematical dual of FK/PK relationships

monads and monad comprehensions forms the basis of a common query language for SQL and noSQL

translate object graph into k/v store : key is ram address, value is actual content

Referential integrity implies a closed-world assumption where transactions on the db are serialized by suspending the world synchronously, applying the required changes, and resuming the world again. This is in DIRECT contradiction with distribution and scale-out

SQL's lack of compositionality:since there is no recursion, rows can contain only scalar values.
In anonymous types, a row can contain arbitrary values, including other rows

argument against O/R mapper

Since the relational model is not closed under composition, the notion of index has to be defined OUTSIDE the model

with index included, each row has a collction of foreign keys pointing to the referenced table much like the original graph

The ability to create indexes makes a closed-world assumption => size of index limited

In object-graph model, the identity of objects is intensional => determined by the key in the store
In relational model, object identity is extensional, i.e., object id is part of vlaue in the form of PK

The two models are really similar,except lookup direction is reversed

SQL vs coSQL
children to parents	parents to chilren
closed world	open world
entities have identity	environment determins identity
necessarily strongly typed	potentially dynamically typed
synchronous updates across multiple rows	asynch (BASE) updates within single values: (basically available, soft state, eventually consistent)
value-based, strong reference	computation-based, weak reference
not compositonal	compositional
query optimizer		developer/pattern

In k/v store looking up a value involves computation => latency and fail in an open world,e.g., URIs as keys, "resources" as values, and http verbs as a primitive query and data-manipulation language.

In relational model, traversing a relationship involves comparing two values for equality => will not fail in a closed world/referential integrity. This requires strongly typed data in relational model, and conversely, allows dynamically typed in coSQL

If we assume that rows in the foreign-/primary-key model are simply blobs and keys are strings, then the dual key-value model is exactly the HTML5 key-value storage model
