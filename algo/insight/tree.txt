often need to reconstruct the tree from the string rep first

when inspecting the problem, a BFS might give more insight than DFS. => The key of expanding is that finding the continuous subproblem, i.e., the slibling wont affect the part of solution. So that we can start applying recursion

adding any edge to a connected tree will yield a cycle

Heap is a special form of tree => it is packed so can be reprsented as an array

common tactics: start from root, start from leaves (See try both search directions before commiting on one)

tree <=> each node has only 1 out edge (which is to the parent)

when looking at 2 nodes, often need to find LCA of the 2 nodes, to find a nice, self-contained tree, instead of looking at the root of the whole tree!

A tree with |V| nodes always has |V| - 1 edges. Moreover, we can pick any node as the root of traversal

when traverse the tree with BFS/DFS, we dont need to keep a visited list anymore, just need to record where the edge is from, and skip that during neighbor detection phase
