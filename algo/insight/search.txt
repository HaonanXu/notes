search direction matters a lot, even 2 sides of the equation, decide look from which side can greatly affect insight and implementation
difficulty. Have to try both before settling on one(!!!),e.g., beginning of action/end of action, LHS/RHS.  This change of search direction is
often useful in solving problem differently, similar to "swap unknown with part of data" idea.

------
similarly, if we have a list of variables, we can impose an order of them so the search space will be limited by the extreme values =>
because other variables will be infered, one by one, perhaps recursively

--------
When search space is small enough, instead of finding a closed form, we can just brute force search. This is a common step as part ofj
problem, and often easier to code

E.g., we have a condition: "can finish a task in 2 steps?", instead of trying to look at the steps/tasks and infer more insights, we
could try  to generate-filter all 2 steps combinations, and see if our generation can find an answer.

----
Since we are searching for unknown, almost always worth a try to look at unknowns, and try to infer some traits/properties of unknowns.
Often, you can inverse it and find that the condition is actually if and only if, or if and only if under some additional constraints

------
Similiarly, we can infer some properies from the unknowns, and complete search on that properties, and then filter out the results

------
Often the challenge is to decompose a composite conditon into 2+ independent conditons, and search on them one by one, i.e.,
 filter by one, and then while inside it, filter but another...and keep going 

The kernel of the problem is often how to decompose, so that the two conditions becomes independent and can be reached at the same time, i.e., they should not interfere with each other!

Even when the composite condiotn looks easy, decomposing them into 2 conditons will often makes code remarkably easier
