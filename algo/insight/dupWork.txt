Often we can seen the correctness of a more brute force approach, but it is not enough to scale to the workload required, i.e., we need to filter unnesscary work that doesn't affect final result early.

going through sorted order is like go though by indices, we can use "read and then update" pattern to build complete solution step by step from partial solutions

3. We can eliminate unneeded work eagerly with sorted order, e.g.,
a. we know the subproblem wouldn't affect the final solution because it is too far in the sorted order
b. we know we already have a complete solution regarding a solution before index, so any new subproblem within that range will not matter anyway.

Note this means we need to conciously set up state variable ourselves to keep track of range of subproblems that may still affect the final solution, and update it as soon as possible, we also need to sort/enforce an order of visiting subproblems ourselves.


