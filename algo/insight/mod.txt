mod is a classic example of group. This means it is also often associated with pigeon hole princple. We can consciously force collision to
yield additional insight.

Often, each member in the group can be projected a CLASS of identifies. This is another form of collision we can take advantage of

---
Get the 1-based index of inside block, where num is an 1-based index as well

(num - 1) % mod //reduce to [0, n-1] range
num++; //convert back to [1, n] range

The reason is that if you want to use mod to calculate blocks, mod works only in the 0-started index domain, both the input and output,

----
(a * b) % c = (a %c * b % c) %c => this means for counting problems, you order/pos of mod does not matter, on condition that it does not
cause overflow
