HTTP Digest -> prob overkill with less sensitive applications

With APIs, better for the client to be apssing tokens instead of the password => so that it can be replace if it's compromised

Common ways
1. HTTP basic auth over HTTPS, common for web services

GET /spec.html HTTP/1.1
Host: www.example.org
Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==

2. Cookies and session management
Server is no longer stateless

3. Token in HTTP headers,e.g., OAuth 2.0
GET /resource/1 HTTP/1.1
 Host: example.com
 Authorization: Bearer mF_9.B5f-4.1JqM

Toekn is within the HTTP headers, not stateless either

4. Query Authentication with additional signature params

-----------

When a WS makes HTTP request, it may inlcude credentials in the HTTP header Authorization, server does authentication and authoriazation =>
otherwise return 401

alternatively, can send request without knowing the actual authentication credentials

use WWW-Authenticate header to issue a challenge to user who failed to provide Authentication header

Once the client has this info, username/pw are combined into a single string and encoded with base 64 encoding

puts Base64.encode64("#{USER}:#{PASSWORD}")

=> if HTTP is unencrypted, can use HTTP Digest

------
2.HMAC, in header
Authentication: hmac username:nonce:{salted hash of secret}
Date: {current time}

Server side can reconstruct the salted hash, and replay attack wont work, because the salted hash will become invalid once it is outside the range of the date field, although this also means if a genuine client sents wrong time, server will reject it.
nonce also ensures that salted hash is valid for each request only once,i.e., if I send 2 requests within same second, nonce will be different


