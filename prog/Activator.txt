Intent
automates scalable on-demand activation and deactiviation of service executions contexts to run services accessed by many clients without consuming excessive resources

Applicability

When services in a system should only consume resources when they are access activly by clients
When clients should be shielded from where sercies are located, how they are deployed onto hosts or processes, & how their liefecycle is managed

Dynamics

1.Client finds and passes Service ID to Activator
2. Activator activates service if it is not activated yet and passes the service ref back to the client. 
3. Client sends message to activated service
4. When the op is one, the service lets activator to close it
5. activator deletes service id

Consequences
+ on-demand resource allocation
+ coarse-grained concurrency by spawning server processes to run on multicore
computers
- hard to analyze the behavior of an app until its compoents are activated at
  run time

Known uses
Android's AcitivityManagerService

---------
In Android

1. encapuslate each distinct unit of app functionality into a self-contained service and define its service id, e.g., URLs, IOR, host & port, Intent
	elements of Intent include
	Name: optional name for a component
	Action: string naming the action to perform or the action took place and is being reported
	Data: URL of data to be actd on & MIME type
	Category: string giving additional info about the action to execute

2. Identify services to activate & deactivate on demand: performance and security concerns

3. Define service activation/deactivition strategy
	service registration strategy,e.g., static text file or dynamic object registration
	service initialzation strategy, e.g., stateful or stateless. services manage their own persistent state
	service deactivation strategy: service-triggered, cleint-triggered, or activator-triggered deactivation

